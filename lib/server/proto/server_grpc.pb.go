// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.24.4
// source: proto/server.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Colyseus_Spawn_FullMethodName            = "/server.Colyseus/Spawn"
	Colyseus_RegisterInterest_FullMethodName = "/server.Colyseus/RegisterInterest"
	Colyseus_Update_FullMethodName           = "/server.Colyseus/Update"
	Colyseus_NotifySubscriber_FullMethodName = "/server.Colyseus/NotifySubscriber"
)

// ColyseusClient is the client API for Colyseus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ColyseusClient interface {
	Spawn(ctx context.Context, in *SpawnRequest, opts ...grpc.CallOption) (*SpawnResponse, error)
	RegisterInterest(ctx context.Context, in *RegisterInterestRequest, opts ...grpc.CallOption) (*RegisterInterestResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	NotifySubscriber(ctx context.Context, in *NotifySubscriberRequest, opts ...grpc.CallOption) (*NotifySubscriberResponse, error)
}

type colyseusClient struct {
	cc grpc.ClientConnInterface
}

func NewColyseusClient(cc grpc.ClientConnInterface) ColyseusClient {
	return &colyseusClient{cc}
}

func (c *colyseusClient) Spawn(ctx context.Context, in *SpawnRequest, opts ...grpc.CallOption) (*SpawnResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SpawnResponse)
	err := c.cc.Invoke(ctx, Colyseus_Spawn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *colyseusClient) RegisterInterest(ctx context.Context, in *RegisterInterestRequest, opts ...grpc.CallOption) (*RegisterInterestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterInterestResponse)
	err := c.cc.Invoke(ctx, Colyseus_RegisterInterest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *colyseusClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, Colyseus_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *colyseusClient) NotifySubscriber(ctx context.Context, in *NotifySubscriberRequest, opts ...grpc.CallOption) (*NotifySubscriberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NotifySubscriberResponse)
	err := c.cc.Invoke(ctx, Colyseus_NotifySubscriber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ColyseusServer is the server API for Colyseus service.
// All implementations must embed UnimplementedColyseusServer
// for forward compatibility.
type ColyseusServer interface {
	Spawn(context.Context, *SpawnRequest) (*SpawnResponse, error)
	RegisterInterest(context.Context, *RegisterInterestRequest) (*RegisterInterestResponse, error)
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	NotifySubscriber(context.Context, *NotifySubscriberRequest) (*NotifySubscriberResponse, error)
	mustEmbedUnimplementedColyseusServer()
}

// UnimplementedColyseusServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedColyseusServer struct{}

func (UnimplementedColyseusServer) Spawn(context.Context, *SpawnRequest) (*SpawnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Spawn not implemented")
}
func (UnimplementedColyseusServer) RegisterInterest(context.Context, *RegisterInterestRequest) (*RegisterInterestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterInterest not implemented")
}
func (UnimplementedColyseusServer) Update(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedColyseusServer) NotifySubscriber(context.Context, *NotifySubscriberRequest) (*NotifySubscriberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifySubscriber not implemented")
}
func (UnimplementedColyseusServer) mustEmbedUnimplementedColyseusServer() {}
func (UnimplementedColyseusServer) testEmbeddedByValue()                  {}

// UnsafeColyseusServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ColyseusServer will
// result in compilation errors.
type UnsafeColyseusServer interface {
	mustEmbedUnimplementedColyseusServer()
}

func RegisterColyseusServer(s grpc.ServiceRegistrar, srv ColyseusServer) {
	// If the following call pancis, it indicates UnimplementedColyseusServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Colyseus_ServiceDesc, srv)
}

func _Colyseus_Spawn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpawnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ColyseusServer).Spawn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Colyseus_Spawn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ColyseusServer).Spawn(ctx, req.(*SpawnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Colyseus_RegisterInterest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterInterestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ColyseusServer).RegisterInterest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Colyseus_RegisterInterest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ColyseusServer).RegisterInterest(ctx, req.(*RegisterInterestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Colyseus_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ColyseusServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Colyseus_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ColyseusServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Colyseus_NotifySubscriber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifySubscriberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ColyseusServer).NotifySubscriber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Colyseus_NotifySubscriber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ColyseusServer).NotifySubscriber(ctx, req.(*NotifySubscriberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Colyseus_ServiceDesc is the grpc.ServiceDesc for Colyseus service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Colyseus_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "server.Colyseus",
	HandlerType: (*ColyseusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Spawn",
			Handler:    _Colyseus_Spawn_Handler,
		},
		{
			MethodName: "RegisterInterest",
			Handler:    _Colyseus_RegisterInterest_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Colyseus_Update_Handler,
		},
		{
			MethodName: "NotifySubscriber",
			Handler:    _Colyseus_NotifySubscriber_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/server.proto",
}
